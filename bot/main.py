import asyncio
import random
import sqlite3
import time
import hashlib

import aiogram.utils.exceptions
import aioschedule
import schedule as schedule

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from random import choice

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import InputMedia, InputMediaPhoto

# from middlewares import ThrottlingMiddleware
from config import API_TOKEN
from markups import *
from db import create_update_profile, create_user, delete_form, get_photos

storage = MemoryStorage()
bot = Bot(API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')


HELP_TEXT = """
<b>/rate</b> - <em>–ü–æ–æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ñ–æ—Ç–∫–∏</em>
<b>/test</b> - <em>–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ IQ</em>
"""


# 305605867	Anton
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    id_chat = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}!üëã</b>\n\n'
                         # f'–≠—Ç–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–ª - @Solevaaaya - —Ç–æ–ø 2 –ë–û –†–æ—Å—Å–∏–∏ –Ω–∞ –º–∏–Ω—É—Ç—É—á–∫—É <em>(–¥–∞-–¥–∞, 
                         # 35 —Ä–∞–Ω–≥)</em>\n\n # f'–≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n'
                         f'–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–º–∏ - /help',
                         reply_markup=markup_start)

    await create_user(id_chat, username, first_name)


@dp.message_handler(Text(equals=['–í—Å–µ –∫–æ–º–∞–Ω–¥—ã üí¨', '/help']))
async def help_comm(message: types.Message):
    await message.answer(HELP_TEXT)


@dp.message_handler(Text(equals=['–ó–∞—Ü–µ–Ω–∏—Ç—å —Ñ–æ—Ç–∫–∏ üëÄ', '/rate']))
async def rate_photo(message: types.Message):
    await get_photos(message, choice, aiogram)



# –¢–µ—Å—Ç
@dp.message_handler(commands=['test'])
async def test_cmd(message: types.Message):
    await message.answer('–¢–µ—Å—Ç –Ω–∞ IQüßê', reply_markup=markup_test)


async def test_done(message: types.Message):
    time.sleep(2)
    await message.answer('–ò—Ç–∞–∫, –ø–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏...')
    time.sleep(4)
    await message.answer('<em>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...</em>')
    time.sleep(3)
    await message.answer('<em>–ó–∞–≥—Ä—É–∑–∫–∞...</em>')
    time.sleep(3)
    await message.answer(
        f'<b>–¢–≤–æ–π IQ => {random.randint(-10, 10)}</b>\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—é! –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã —ç—Ç–æ–≥–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å!üí™')
    time.sleep(2)
    await message.answer_sticker('CAACAgIAAxkBAAEIaAdkJ4CLyfWswB9y8O7G4QfQs8LwagACcgEAAiI3jgTwHKSRbRIvOi8E')
    time.sleep(2)
    await message.answer_sticker('CAACAgIAAxkBAAEIaAtkJ4DJLAGDPvZQvGxI272XdLruRAACsgEAAhZCawqceQABhqhR6VIvBA')
    return


# –î–æ–±–∞–ª–≤–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
class ClientStatesGroup(StatesGroup):
    photo = State()
    desc = State()


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å ‚Ü©Ô∏è'), state='*')
async def cancel_form(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return None
    await message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_start)
    await state.finish()


@dp.message_handler(Text(equals='–ú–æ—è –∞–Ω–∫–µ—Ç–∞ ü¶∏‚Äç‚ôÇÔ∏è'), state=None)
async def my_form(message: types.Message):
    user_id = message.from_user.id
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()

    form = cur.execute(f"SELECT photo, description FROM users WHERE user_id == '{user_id}'").fetchone()
    if form[0] == 'none':
        await ClientStatesGroup.photo.set()
        await message.answer('<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã</b>\n\n–î–∞–≤–∞–π –∂–µ —Å–æ–∑–¥–∞–¥–∏–º –µ—ë ü§ë')
        time.sleep(1)
        await add_form(message)
        return
    else:
        await message.answer_photo(photo=form[0], caption=form[1], reply_markup=markup_ud_form)
    conn.commit()
    cur.close()
    conn.close()


async def add_form(message: types.Message):
    await message.answer('<b>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n<i>–ï—ë –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</i>\n\n<em>'
                         '–ù–∞–∂–º–∏ "–û—Ç–º–µ–Ω–∏—Ç—å ‚Ü©Ô∏è" –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏</em>',
                         reply_markup=markup_cancel_form)


@dp.message_handler(lambda message: not message.photo, state=ClientStatesGroup.photo)
async def check_photo(message: types.Message):
    return await message.answer('–Ø –∂–µ –≤—Ä–æ–¥–µ —è—Å–Ω–æ —Å–∫–∞–∑–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æü§¶‚Äç‚ôÇÔ∏è')


@dp.message_handler(lambda message: message.photo, content_types=['photo'], state=ClientStatesGroup.photo)
async def load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    await ClientStatesGroup.next()
    await message.answer('<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!‚úÖ</b>\n\n–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è'
                         '–ø–æ–¥ —Ñ–æ—Ç–∫–æ–π –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ')


@dp.message_handler(lambda message: message.text, content_types=['text'], state=ClientStatesGroup.desc)
async def load_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text
        await message.answer(
            '<b>–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!‚úÖ</b>\n\n–¢–µ–ø–µ—Ä—å –µ—ë –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –µ—ë!',
            reply_markup=markup_start)
        await message.answer_photo(data['photo'], caption=data['desc'])

    await create_update_profile(message, data)

    await state.finish()


@dp.message_handler(Text(equals='qwerty'))
async def text(message: types.Message):
    conn = sqlite3.connect('db.sqlite3')
    cur = conn.cursor()
    users = cur.execute('SELECT user_id FROM users').fetchall()
    us = str(*users)
    for i in list(*us):
        await bot.send_message(i, '–†–µ–∫–ª–∞–º–∞!')
    conn.commit()
    cur.close()
    conn.close()


# Callback_handlers
@dp.callback_query_handler(lambda call: call.data == 'holdik' or call.data == 'vasyadasher' or call.data == 'mma'
                           or call.data == 'antinub'
                           or call.data == 'cancel_test')
async def callback_q1(call: types.CallbackQuery):
    if call.data == 'mma':
        await call.message.edit_text('–ö—Ä–∞—Å–∞–≤–∞, –±—Ä–æ! –ö–æ–Ω–µ—á–Ω–æ –∂–µ —à–∫–∞—Ñ, —Ç—É—Ç –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–πüòé\n\n'
                                     '<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:</b><em>–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?</em>',
                                     reply_markup=markup_test_question2)
        await call.answer()
    if call.data == 'holdik' or call.data == 'vasyadasher' or call.data == 'antinub':
        await call.message.edit_text('–ù–ï–í–ï–†–ù–û!üò° –ö–∞–∫ –º–æ–∂–Ω–æ –Ω–µ –∑–Ω–∞—Ç—å —ç—Ç–æ!???\n\n'
                                     '<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:</b><em>–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?</em>',
                                     reply_markup=markup_test_question2)
        await call.answer()
    if call.data == 'cancel_test':
        await call.message.delete()
        await bot.delete_message(call.message.chat.id, call.message.message_id - 1)
    await call.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')


# @dp.callback_query_handler(lambda call: call.data == 'holdik' or call.data == 'vasyadasher' or call.data == 'mma' or call.data == 'antinub' or call.data == 'cancel_test')
# async def callback_q1(call: types.CallbackQuery):
#     if call.data == 'vasyadasher':
#         await call.message.edit_text('–ö—Ä–∞—Å–∞–≤–∞, –±—Ä–æ! –ö–æ–Ω–µ—á–Ω–æ –∂–µ VasyaDasher, —Ç—É—Ç –±–µ–∑ —Å–æ–º–Ω–µ–Ω–∏–πüòé\n\n'
#                                      '<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:</b><em>–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?</em>',
#                                      reply_markup=markup_test_question2)
#         await call.answer()
#     if call.data == 'holdik' or call.data == 'mma' or call.data == 'antinub':
#         await call.message.edit_text('–ù–ï–í–ï–†–ù–û!üò° –ö–∞–∫ –º–æ–∂–Ω–æ –Ω–µ –∑–Ω–∞—Ç—å —ç—Ç–æ!???\n\n'
#                                      '<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:</b><em>–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?</em>',
#                                      reply_markup=markup_test_question2)
#         await call.answer()
#     if call.data == 'cancel_test':
#         await call.message.delete()
#         await bot.delete_message(call.message.chat.id, call.message.message_id - 1)
#     await call.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')


@dp.callback_query_handler(
    lambda call: call.data == '20' or call.data == '87' or call.data == '148' or call.data == '16')
async def callback_q2(call: types.CallbackQuery):
    if call.data == '16':
        await call.message.edit_text('–£–æ—É –£–æ—É! –≠—Ç–æ –≤–µ—Ä–Ω–æ!ü•≥ –¢—ã –Ω–µ —Ç–∞–∫–æ–π –±–µ–∑–º–æ–∑–≥–ª—ã–π, –∫–∞–∫ —è –¥—É–º–∞–ª')
        await call.answer()
        await test_done(call.message)
    else:
        await call.message.edit_text('–Ø –∂–µ –Ω–∞–ø–∏—Å–∞–ª: –Ω–µ —Ç–µ–±–µ, –∞ –º–Ω–µ! –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π!')
        await call.answer()
        await test_done(call.message)


@dp.callback_query_handler(lambda call: call.data == 'dislike' or call.data == 'like' or call.data == 'go'
                           or call.data == 'update_form' or call.data == 'delete_form'
                           or call.data == 'delete_form_done' or call.data == 'back'
                           or call.data == 'url'
                           )
async def callback_rate(call: types.CallbackQuery):
    if call.data == 'like':
        await rate_photo(call.message)
        await call.answer()
    if call.data == 'dislike':
        await rate_photo(call.message)
        await call.answer()
    if call.data == 'url':
        await call.answer('–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç @–ò–º–µ–Ω–∏ üò¢')
    if call.data == 'go':
        await call.message.edit_text('<b>–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n\n<em>–°–∫–æ–ª—å–∫–æ –≤–µ—Å–∏—Ç –∫–∞–ª–ª —Å–ª–æ–Ω–∞?</em>',
                                     reply_markup=markup_test_question)
    if call.data == 'update_form':
        await ClientStatesGroup.photo.set()
        await add_form(call.message)
        await call.answer()
    if call.data == 'delete_form':
        await call.message.edit_caption('–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n\n'
                                        '<em>–ê–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ</em>',
                                        reply_markup=markup_delete_form)
        await call.answer()
    if call.data == 'delete_form_done':
        user_id = call.from_user.id
        await delete_form(user_id)
        await call.message.delete()
        await call.bot.delete_message(call.message.chat.id, call.message.message_id - 1)
        await call.answer('–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞')
    if call.data == 'back':
        conn = sqlite3.connect('db.sqlite3')
        cur = conn.cursor()

        id_user = call.from_user.id
        form = cur.execute(f"SELECT photo, description FROM users WHERE user_id == '{id_user}'").fetchone()
        if form[0] == 'none':
            await ClientStatesGroup.photo.set()
            await call.message.answer('<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —É —Ç–µ–±—è –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã</b>\n\n–î–∞–≤–∞–π –∂–µ —Å–æ–∑–¥–∞–¥–∏–º –µ—ë ü§ë')
            time.sleep(1)
            await add_form(call.message)
            return
        else:
            await call.message.edit_caption(caption=form[1], reply_markup=markup_ud_form)
        conn.commit()
        cur.close()
        conn.close()
        await call.answer()


# @dp.callback_query_handler(lambda call: call.data == 'dislike' or call.data == 'like' or call.data == 'go')
# async def callback_rate(call: types.CallbackQuery):
#     if call.data == 'like':
#         await rate_photo(call.message)
#         await call.answer()
#     if call.data == 'dislike':
#         await rate_photo(call.message)
#         await call.answer()
#     if call.data == 'go':
#         await call.message.edit_text('<b>–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n\n<em>–ö—Ç–æ –ª—É—á—à–∏–π –ë–û –º–∏—Ä–∞ –≤ 2022 –≥–æ–¥—É?</em>',
#                                      reply_markup=markup_test_question)


# Inline mod
@dp.inline_handler()
async def inline_answer(inline: types.InlineQuery) -> None:
    text = inline.query or 'echo'
    input_content = types.InputTextMessageContent(text)
    result_id: str = hashlib.md5(text.encode()).hexdigest()
    item = types.InlineQueryResultArticle(
        input_message_content=input_content,
        id=result_id,
        title=text
    )

    await bot.answer_inline_query(inline_query_id=inline.id, results=[item], cache_time=1)


if __name__ == "__main__":
    # dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
